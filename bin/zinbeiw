#!/usr/bin/env ruby
# -*- coding: utf-8 -*-
# vim: filetype=ruby

self_file =
  if File.symlink?(__FILE__)
    require 'pathname'
    Pathname.new(__FILE__).realpath
  else
    __FILE__
  end
$:.unshift(File.dirname(self_file) + '/../lib')

start_time = Time.now

puts '
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 ))~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~((
((                                                                    ))
 )) ========= ======  ||\\      || ||========   ||=========  ======   ((
((      / /     ||    || \\     || ||        )) ||             ||      ))
 ))    / /      ||    ||  \\    || ||        )) ||             ||     ((
((    / /       ||    ||   \\   || ||========   ||=======      ||      ))
 ))  / /        ||    ||    \\  || ||        )) ||             ||     ((
((  / /         ||    ||     \\ || ||        )) ||             ||      ))
 )) ========= ======  ||      \\|| ||========   ||=========  ======   ((
((                                                                    ))
 ))~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~((
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'

a=rand(15)
print '〜'
0.upto(a) do |s|
print '〜'

end
puts '＜コ：彡'
puts ''

puts 'helpを参考にコマンドを入力してください'

# search words

begin
  str = ['sessi','kashi','exit','help']

  once = ['find','delete','remove',
    'rename','makefolder','wordcount',
    'NumberGame','Encode','week']

  lucky = ['loto6','Numbers','kuji']

  dark = ['OneRunner','Eval']

  denki = ['Anpea','Volt','Rister']

  print '>'

# search words exit!

# Wainting Action code!

  while line = ARGF.gets
    line.chomp!

    case

      when line.match(str[0])
        def seru(b)
          y = (b-32)*5/9
          return y
        end
        puts '華氏を数字で入力してください'
        print '>'
        f = gets.to_i
        m = seru(f)
        puts "摂氏は#{m.round}です。"
        print '>'
      when line.match(str[1])
        def seru(b)
          y = (1.8 * b) + 32
          return y
        end
        puts '摂氏を数字で入力してください'
        print '>'
        f = gets.to_i
        m = seru(f)
        puts "華氏は#{m.round}です。"

        print '>'
      when line.match(str[2])
        exit!
      when line.match(lucky[0])

        class Loto6

          def sum (a,b,c,d,e,f)
            x = Random.rand(a) + 1
            y = Random.rand(b) + 1
            z = Random.rand(c) + 1
            s = Random.rand(d) + 1
            t = Random.rand(e) + 1
            d = Random.rand(f) + 1
            return x,y,z,s,t,d
          end
	end

        taka = Loto6.new
        n = taka.sum(43,43,43,43,43,43)

        puts '参考にするロト６のナンバーは、'
        puts ''
        print n
        print ' '
        print 'です！'
        puts ''
        puts '※当たるも八卦、当たらぬも八卦。勝負は時の運です。'

        print '>'

      when line.match(lucky[1])
        puts 'ナンバーズではこの数字を参考にしてください！'

        class Numbers

          def sum (a,b,c,d)
            x = Random.rand(a)
            y = Random.rand(b)
            z = Random.rand(c)
            s = Random.rand(d)
            return x,y,z,s
          end
        end

        taka = Numbers.new
        p taka.sum(10,10,10,10)

        puts '※当たるも八卦、当たらぬも八卦。勝負は時の運です。'

        print '>'

      when line.match(lucky[2])
        puts '今日の運勢を占ってみましょう。'
        puts '大吉→中吉→吉→小吉→凶→大凶'

        a=rand(16)

        case a
          when 0..2
            puts '大吉'
            puts 'さぁ、外に出て頑張ろう。仕事へGo!'
          when 3..5
            puts '中吉'
            puts 'ほどほどな普通。ストレスと向き合え!'
          when 6..8
            puts '吉'
            puts 'だんだん疲れてきたんだな。ゆっくり休め!'
          when 9..11
            puts '小吉'
            puts 'あまりいいことがないから、ジッとしているに限る。'
          when 12..14
            puts '凶'
            puts 'ピンチのあとのチャンス到来。あきらめるな。'
          when 15..16
            puts '大凶'
            puts '今日は何かまずい気をつけろ!'
        end
print '>'

      when line.match(dark[0])

        begin
          puts '
          ワンライナー、１行コードの館へようこそ。さぁ、はじめましょう！'
          print '>'
          re = gets.chomp
          puts ''
          eval(re)
          puts ''

        rescue => et
          p et
          print '>'
          puts 'エラーです。文字列を確認してください！'
          puts ''
          retry

        ensure
          puts '終了は exit を入力してください！'
        end

        print '>'

when line.match(denki[0])

def anpea(a,b)
x = b / a
return x
end

puts
puts '抵抗を入力してください'

print '>'
f = gets.to_i

puts
puts '電圧を入力してください'
print '>'

g = gets.to_i

m = anpea(f,g)

puts
puts "電流は#{m.round}です。"

print '>'

when line.match(denki[1])

def volt(c,d)
y = c * d
return y
end

puts
puts '抵抗を入力してください'
print '>'

h = gets.to_i
puts
puts '電流を入力してください'

print '>'
i = gets.to_i

j = volt(h,i)

puts
puts "電圧は#{j.round}です。"

print '>'

when line.match(denki[2])

def rister(k,l)
z = k / l
return z
end

puts
puts '電流を入力してください'
print '>'

l = gets.to_i
puts
puts '電圧を入力してください'

print '>'
k = gets.to_i

q = rister(k,l)

puts
puts "抵抗は#{q.round}です。"

print '>'

# It is a help document of zinbeic.

      when line.match(str[3])
        
p 'COMMAND'.center(60,'-')

puts '
sessi       華氏から摂氏へ変換します

kashi       摂氏から華氏へ変換します

kuji        今日の運勢を乱数を使って占います

Numbers     Numbers４の候補となる数字を乱数を使って出力します

loto6       Loto６の候補となる数字を乱数を使って出力します

OneRunner   ワンライナーの館へ案内します

delete      ファイルを指定して削除できます

find        単語を探します

remove      フォルダを消します

rename      ファイルの名前を変えます

makefolder  フォルダを作成します

wordcount   対象のファイル全体を％で単語カウントします

NumberGame  数字当てゲームです

Encode      文字列のエンコードを評価します

Eval        eval族の館へようこそ、足し算などが行えます

Anpea       オームの法則を使い、電流を調べます

Volt        オームの法則を使い、電圧を調べます

Rister      オームの法則を使い、抵抗を調べます

week        太陽暦で日付の曜日を真と偽で判定します

終了するときは、exitと入力します'

p 'COMMAND'.center(60,'-')

print '>'

# It is a help document of zinbeic exit!

# The command which can be called is only once. 　
when line.match(once[0])

begin
print '探したい文字列を入力してください：　'
re = gets.chomp

rescue => et
  p et
  puts 'エラーです。文字列を確認してください！'
  retry
end

begin
print '探したいフォルダのパスを指定してください：　'
Folder = gets.chomp

rescue => es
  p es
  puts 'エラーです。文字列を確認してください！'
end

begin
dir = Dir.chdir(Folder)

rescue Errno::EEXIST
Errno::EEXIST
end

begin
print 'ファイル名を拡張子を含んで入力してください：　'

filename = gets.chomp
Files = File.open(filename) do |d|

puts ' '

  while line = d.gets
    line.chomp!
    if line.match(re)
    printf('%4d 行目 : %s ',d.lineno,line)
    print '： Find!(発見!)'
    puts ' '
    puts ' '
    else
  end
end
end

rescue => ex
  p ex
  puts 'エラーです。ファイル名を確認してください。\ｎ'
  retry

ensure
  puts '終了は exit を入力してください！'
end
        print '>'

when line.match(once[1])

begin
print '消したいフォルダのパスを指定してください：　'
Folder = gets.chomp

rescue => es
  p es
  puts 'エラーです。文字列を確認してください！'
end

begin
dir = Dir.chdir(Folder)

rescue Errno::EEXIST
Errno::EEXIST
end

begin
print 'ファイル名を拡張子を含んで入力してください：　'

del = readline.chomp!
File.delete(del)

puts '削除しました。'

rescue => ex
  p ex
  puts 'エラーです。ファイル名を確認してください。\ｎ'
  retry

ensure
  puts '終了は exit を入力してください！'
end
print '>'

when line.match(once[2])

begin
print '削除したいフォルダのパスを指定してください：　'
Folder = gets.chomp

rescue => es
  p es
  puts 'エラーです。文字列を確認してください！'
end

begin
dir = Dir.chdir(Folder)

rescue Errno::EEXIST
Errno::EEXIST
end

begin
print '削除したいフォルダ名を拡張子を含んで入力してください：　'

rem = readline.chomp!
Dir.rmdir(rem)

puts '削除しました。'

rescue => ex
  p ex
  puts 'エラーです。ファイル名を確認してください。\ｎ'
  retry

ensure
  puts '終了は exit を入力してください！'
end
        print '>'
    when line.match(once[3])

begin
print '名前を変えたいフォルダのパスを指定してください：　'
Folder = gets.chomp

rescue => es
  p es
  puts 'エラーです。文字列を確認してください！'
end

begin
dir = Dir.chdir(Folder)

rescue Errno::EEXIST
Errno::EEXIST
end

begin
print '現在のファイル名を拡張子を含んで入力してください：　'
re = gets.chomp!

rescue => ex
  p ex
  puts  'エラーです。ファイル名を確認してください。\ｎ'
  retry
end

begin
print '変更するファイル名を拡張子を含んで入力してください：　'

no = gets.chomp!

File.rename(re,no)

puts '変更しました。'

rescue => ex
  p ex
  puts  'エラーです。ファイル名を確認してください。\ｎ'
  retry

ensure
  puts '終了は exit を入力してください！'
end

        print '>'
    when line.match(once[4])

begin
print '作成したいフォルダのパスを指定してください：　'
Folder = gets.chomp

rescue => es
  p es
  puts 'エラーです。文字列を確認してください！'
end

begin
dir = Dir.chdir(Folder)

rescue Errno::EEXIST
Errno::EEXIST
end

begin
print 'フォルダ名を入力してください：　'

ma = readline.chomp!
Dir.mkdir(ma)

puts '作成しました。'

rescue => ex
  p ex
  puts 'エラーです。ファイル名を確認してください。\ｎ'
  retry

ensure
  puts '終了は exit を入力してください！'
end

        print '>'
    when line.match(once[5])

begin
print '探したいフォルダのパスを指定してください：　'
Folder = gets.chomp

rescue => es
  p es
  puts 'エラーです。文字列を確認してください！'
end

begin
dir = Dir.chdir(Folder)

rescue Errno::EEXIST
Errno::EEXIST
end

begin
print '数えたいファイル名を拡張子を含んで入力してください：　'

count = Hash.new(0)

#文字列の出現頻度を調べる。
def char_stat(str)
  table = Hash.new(0)
  str.scan(/./m){|ch|
    table[ch] += 1
  }
table.to_a.sort_by{|char,count| -count}
end

#単語の集計
filename = gets.chomp
Files = File.open(filename) do |d|
while line = d.gets
words = line.split
words.each do |word|
  count[word] += 1
end
end

#結果の出力

count.sort do |a,b|
  a[1] <=> b[1]
end.each do |char,count|

print "#{char.inspect}: "
print "#{count % 100 / words.length}%"
puts ' '
puts ' '
end
end

rescue => ex
  p ex
  puts 'エラーです。ファイル名を確認してください。\ｎ'
  retry

ensure
  puts '終了は exit を入力してください！'
end

        print '>'

when line.match(once[6])

x = Random.rand(100) + 1
numb = 0
numb = numb + 1

puts '何回まで、NumberGameで繰り返すか指定してください'
print '>'
num = gets.chomp.to_i
puts "#{num}回、繰り返すまでに当ててください"
puts
puts '1~100までの数字をいれてくださいNumberGameスタート！'
print '>'

num.times do |z|
begin
i_num = gets.chomp.to_i
if i_num < z
  puts 'コンピュータの選んだ数字の方が大きいため大きい数字を入力してください'
  print '>'
  numb = numb + 1
elsif i_num > z
  puts 'コンピュータの選んだ数字の方が小さいため小さい数字を入力してください'
  print '>'
  numb = numb + 1
else i_num == x
  puts
  puts 'おめでとうございます、正解です'
  puts
  puts "#{numb}回で正解しました"
  puts
  break
end
if i == (num - 1)
  puts
  puts '正解は' + x.to_s + 'でした'
  puts
  puts '残念、もう一度チャレンジ！'
  puts
end
rescue => ex
  p ex
  puts 'エラーです、数字を確認してください\ｎ'
  retry
end
end

puts 'お疲れさまでした。'
        print '>'
when line.match(once[7])
       puts

class Enco

begin
  puts '文字列を入力してください'
  print '>'
  filename = gets.chomp
rescue => ee
  p ee
  puts 'エラーです。文字列を確認してください！'
end

puts ''
puts '変更前のエンコードを指定してください'
puts 'ISO-2022-JP,SJIS,eucJP,UTF-8　が候補です。'
print '>'
befenco = gets.chomp

begin
  puts ''
  puts 'エンコードを指定してください'
  puts 'ISO-2022-JP,SJIS,eucJP,UTF-8　が候補です。'
  print '>'
  aftenco = gets.chomp
  puts

rescue => ed
  p ed
  puts 'エラーです。エンコーディングを確認してください！'
end

  ut = Encoding::Converter.new(befenco, aftenco)
  p ut.convert(filename)
  ut.finish.dump
  puts

ensure
  puts '終了は exit を入力してください！'
  puts
end
        print '>'
when line.match(dark[1])
        begin
  puts 'eval族の館へようこそ！
簡単な文字列を評価してください'
  print '>'
  re = gets.chomp
  puts ''
  p  eval(re)
  puts ''

rescue => et
  p et
  print '>'
  puts 'エラーです。文字列を確認してください！'
  puts ''
  retry

ensure
puts '終了は exit を入力してください！'
end
        print '>'

when line.match(once[8])
puts ''
puts '日付の曜日をtrue,falseで判定します'
puts '半角数字で入力してください'
puts 'それでは、スタート！'
puts ''

begin
  puts '調べたい年を入力してください'
  print '>'
  nen = gets.chomp.to_i
rescue => ee
  p ee
  puts 'エラーです。数字を確認してください！'
end

puts ''

begin
  puts '調べたい月を入力してください'
  print '>'
  mon = gets.chomp.to_i
rescue => ey
  p ey
  puts 'エラーです。数字を確認してください！'
end

puts ''

begin
  puts '調べたい日を入力してください'
  print '>'
  days = gets.chomp.to_i
rescue => ex
  p ex
  puts 'エラーです。数字を確認してください！'
end

puts ''

t = Time.local(nen, mon, days)

print'日曜日ですか？：'
puts  t.sunday?
print '月曜日ですか？：'
puts t.monday?
print  '火曜日ですか？：'
puts  t.tuesday?
print '水曜日ですか？：'
puts  t.wednesday?
print '木曜日ですか？：'
puts  t.thursday?
print '金曜日ですか？：'
puts  t.friday?
print  '土曜日ですか？：'
puts  t.saturday?

puts

print '>'
# The command which can be called is only once.

      else
        puts "Can't Enter this Words. Please input help"
        print '>'
    end
  end
# Wainting Action Code exit!

# Exception throw!
rescue => ex
  p ex
  puts 'エラーです。文字列を確認してください！'
  retry
  print '>'


# Ruby ensure is Java Exception of finally.
ensure
  puts '終了は exit を入力してください！'
end

end_time = Time.now - start_time
print 'Performance： '
print end_time
puts ' sec.'

__END__
